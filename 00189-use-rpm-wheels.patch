From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Miro=20Hron=C4=8Dok?= <miro@hroncok.cz>
Date: Wed, 15 Aug 2018 15:36:29 +0200
Subject: [PATCH] 00189: Instead of bundled wheels, use our RPM packaged wheels

We keep them in /usr/share/python-wheels

Downstream only: upstream bundles
We might eventually pursuit upstream support, but it's low prio
---
 Lib/ensurepip/__init__.py | 37 ++++++++++++++++++++++++++-----------
 1 file changed, 26 insertions(+), 11 deletions(-)

diff --git a/Lib/ensurepip/__init__.py b/Lib/ensurepip/__init__.py
index 2a140a2624..5bd16a6c59 100644
--- a/Lib/ensurepip/__init__.py
+++ b/Lib/ensurepip/__init__.py
@@ -1,4 +1,6 @@
 import collections
+import distutils.version
+import glob
 import os
 import os.path
 import subprocess
@@ -10,8 +12,26 @@ from importlib import resources
 
 __all__ = ["version", "bootstrap"]
 _PACKAGE_NAMES = ('setuptools', 'pip')
-_SETUPTOOLS_VERSION = "65.5.0"
-_PIP_VERSION = "22.3.1"
+
+_WHEEL_DIR = "/usr/share/python-wheels/"
+
+_wheels = {}
+
+def _get_most_recent_wheel_version(pkg):
+    prefix = os.path.join(_WHEEL_DIR, "{}-".format(pkg))
+    _wheels[pkg] = {}
+    for suffix in "-py2.py3-none-any.whl", "-py3-none-any.whl":
+        pattern = "{}*{}".format(prefix, suffix)
+        for path in glob.glob(pattern):
+            version_str = path[len(prefix):-len(suffix)]
+            _wheels[pkg][version_str] = os.path.basename(path)
+    return str(max(_wheels[pkg], key=distutils.version.LooseVersion))
+
+
+_SETUPTOOLS_VERSION = _get_most_recent_wheel_version("setuptools")
+
+_PIP_VERSION = _get_most_recent_wheel_version("pip")
+
 _PROJECTS = [
     ("setuptools", _SETUPTOOLS_VERSION, "py3"),
     ("pip", _PIP_VERSION, "py3"),
@@ -97,7 +117,7 @@ def version():
     """
     Returns a string specifying the bundled version of pip.
     """
-    return _get_packages()['pip'].version
+    return _PIP_VERSION
 
 
 def _disable_pip_configuration_settings():
@@ -160,21 +180,12 @@ def _bootstrap(*, root=None, upgrade=Fal
         # Put our bundled wheels into a temporary directory and construct the
         # additional paths that need added to sys.path
         additional_paths = []
-        for name, package in _get_packages().items():
-            if package.wheel_name:
-                # Use bundled wheel package
-                wheel_name = package.wheel_name
-                wheel_path = resources.files("ensurepip") / "_bundled" / wheel_name
-                whl = wheel_path.read_bytes()
-            else:
-                # Use the wheel package directory
-                with open(package.wheel_path, "rb") as fp:
-                    whl = fp.read()
-                wheel_name = os.path.basename(package.wheel_path)
-
+        for project, version, py_tag in _PROJECTS:
+            wheel_name = _wheels[project][version]
             filename = os.path.join(tmpdir, wheel_name)
-            with open(filename, "wb") as fp:
-                fp.write(whl)
+            with open(os.path.join(_WHEEL_DIR, wheel_name), "rb") as sfp:
+                with open(filename, "wb") as fp:
+                    fp.write(sfp.read())
 
             additional_paths.append(filename)
 
